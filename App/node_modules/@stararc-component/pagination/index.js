'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PaginationBox = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _select = require('@stararc-component/select');

var _select2 = _interopRequireDefault(_select);

var _input = require('@stararc-component/input');

var _input2 = _interopRequireDefault(_input);

var _button = require('@stararc-component/button');

var _button2 = _interopRequireDefault(_button);

var _index = require('./index.css');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pagination = function (_Component) {
    _inherits(Pagination, _Component);

    function Pagination(props) {
        _classCallCheck(this, Pagination);

        var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

        _this.state = {
            currentPage: Number(props.currentPage) || 1,
            totalPage: Number(props.totalPage) || 1,
            prevEnable: false,
            nextEnable: false
        };
        return _this;
    }

    _createClass(Pagination, [{
        key: 'render',
        value: function render() {
            var _props = this.props;
            var _props$position = _props.position;
            var position = _props$position === undefined ? "left" : _props$position;
            var _props$isBottom = _props.isBottom;
            var isBottom = _props$isBottom === undefined ? "false" : _props$isBottom;


            var styleCss = {
                float: "left",
                width: "40px",
                height: "30px",
                padding: "0 10px",
                borderRadius: "4px",
                border: "1px solid #dddddd",
                marginRight: "5px"
            };

            return _react2.default.createElement(
                'div',
                { className: _index2.default['pagination'], style: { float: position } },
                _react2.default.createElement(_button2.default, { disabled: this.state.prevEnable,
                    onClick: this.handlePrev.bind(this),
                    text: '<<',
                    className: 'pagination__pre' }),
                _react2.default.createElement(
                    'span',
                    { className: _index2.default['pagination__page'] },
                    this.state.currentPage + ' / ' + this.state.totalPage
                ),
                _react2.default.createElement(_button2.default, { disabled: this.state.nextEnable,
                    onClick: this.handleNext.bind(this),
                    text: '>>',
                    className: 'pagination__next' }),
                _react2.default.createElement(_input2.default, { ref: 'inputPage', styleCss: styleCss }),
                _react2.default.createElement(_button2.default, { onClick: this.handleGoTo.bind(this),
                    text: 'GO',
                    className: 'pagination__go' })
            );
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.currentPage != this.props.currentPage) {
                this.setState({
                    currentPage: Number(nextProps.currentPage) || 1,
                    prevEnable: nextProps.currentPage == 1,
                    nextEnable: nextProps.currentPage == nextProps.totalPage
                });
            }
            if (nextProps.totalPage != this.props.totalPage) {
                this.setState({
                    totalPage: Number(nextProps.totalPage) || 1,
                    prevEnable: nextProps.currentPage == 1,
                    nextEnable: nextProps.currentPage == nextProps.totalPage
                });
            }
        }

        // 上一页

    }, {
        key: 'handlePrev',
        value: function handlePrev() {
            var page = this.state.currentPage - 1;
            // 在页码范围内
            if (page >= 1) {
                this.props.pageGoTo && this.props.pageGoTo(page);
            }
        }

        // 下一页

    }, {
        key: 'handleNext',
        value: function handleNext() {
            var page = this.state.currentPage + 1;
            // 在页码范围内
            if (page <= this.state.totalPage) {
                this.props.pageGoTo && this.props.pageGoTo(page);
            }
        }

        // 跳转页

    }, {
        key: 'handleGoTo',
        value: function handleGoTo() {
            var page = parseInt(this.refs.inputPage.getValue());

            page = page < 0 ? 1 : page > this.state.totalPage ? this.state.totalPage : page;

            // 非当前页且在页码范围内
            // if (page != this.state.currentPage && page >= 1 && page <= this.state.totalPage) {
            page != this.state.currentPage && this.props.pageGoTo && this.props.pageGoTo(page);
            // }
        }
    }]);

    return Pagination;
}(_react.Component);

// 翻页位置


exports.default = Pagination;

var PaginationBox = exports.PaginationBox = function (_Component2) {
    _inherits(PaginationBox, _Component2);

    function PaginationBox() {
        _classCallCheck(this, PaginationBox);

        return _possibleConstructorReturn(this, (PaginationBox.__proto__ || Object.getPrototypeOf(PaginationBox)).apply(this, arguments));
    }

    _createClass(PaginationBox, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: _index2.default["bottom-pagination"] },
                this.props.children
            );
        }
    }]);

    return PaginationBox;
}(_react.Component);

