'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextArea = function (_Component) {
    _inherits(TextArea, _Component);

    function TextArea(props) {
        _classCallCheck(this, TextArea);

        var _this = _possibleConstructorReturn(this, (TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call(this, props));

        _this.state = { value: props.defaultValue || '' };
        return _this;
    }

    _createClass(TextArea, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                className = _props.className,
                placeholder = _props.placeholder,
                _props$disabled = _props.disabled,
                disabled = _props$disabled === undefined ? "" : _props$disabled,
                styleCss = _props.styleCss;

            return _react2.default.createElement('textarea', {
                className: className,
                style: styleCss,
                value: this.state.value,
                disabled: disabled,
                onFocus: function onFocus(e) {
                    _this2.focusHandle(e);
                },
                onBlur: function onBlur(e) {
                    _this2.blurHandle(e);
                },
                onChange: function onChange(e) {
                    _this2.changeHandle(e);
                },
                placeholder: placeholder });
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.defaultValue != this.props.defaultValue) {
                this.setState({ value: nextProps.defaultValue });
            }
        }
    }, {
        key: 'focusHandle',
        value: function focusHandle(e) {
            var onFocus = this.props.onFocus;

            onFocus && onFocus(e);
        }
    }, {
        key: 'blurHandle',
        value: function blurHandle(e) {
            var onBlur = this.props.onBlur;

            onBlur && onBlur(e);
        }
    }, {
        key: 'changeHandle',
        value: function changeHandle(e) {
            var value = e.target.value;
            var onChange = this.props.onChange;

            this.setState({ value: value }, function () {
                onChange && onChange(e);
            });
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            return this.state.value;
        }
    }]);

    return TextArea;
}(_react.Component);

exports.default = TextArea;

