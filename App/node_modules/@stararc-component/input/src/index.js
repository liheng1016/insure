import React, {Component} from 'react';
import style from './index.css';

export default class Input extends Component {
    constructor(props) {
        super(props);
        this.state = {value: props.defaultValue || ''}
    }

    render() {
        let {   
            className, 
            type, 
            placeholder,
            styleCss={},
            maxLength
        } = this.props;

        className = className ? className : "input";
        
        return (
            <input
                ref="input"
                style={styleCss}
                disabled={this.props.disabled}
                className={style[className]}
                readOnly={this.props.readonly}
                value={this.state.value }
                onFocus={ e=> {
                    this.focusHandle(e)
                } }
                onBlur={ e=> {
                    this.blurHandle(e)
                } }
                onChange={ e=> {
                    this.changeHandle(e)
                } }
                onKeyUp={ e=> this.keyPressHandle(e)}
                maxLength={maxLength}
                type={ type }
                placeholder={placeholder}/>
        )
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.defaultValue!=this.props.defaultValue) {
            this.setState({value: nextProps.defaultValue||""});
        }
    }

    focusHandle(e) {
        let {onFocus}  = this.props;
        onFocus && onFocus(e)
    }

    blurHandle(e) {
        let {onBlur}  = this.props;
        onBlur && onBlur(e)
    }

    changeHandle(e) {
        let value = e.target.value;
        let {onChange}  = this.props;
        this.setState({value: value}, function () {
            onChange && onChange(e)
        });
    }

    keyPressHandle(e) {
        let value = e.target.value;
        let {onKeyup} = this.props;
        this.setState({value: value}, function () {
            onKeyup && onKeyup(e)
        });
    }

    getFocus() {
        this.refs.input.focus();
    }

    blurFocus() {
        this.refs.input.blur();
    }

    getValue() {
        return this.state.value;
    }

} 