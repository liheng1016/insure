'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _iframe = require('./iframe.upload');

var _iframe2 = _interopRequireDefault(_iframe);

var _upload = require('./upload.css');

var _upload2 = _interopRequireDefault(_upload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by able on 17-5-8.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var IframeUpload = function (_Component) {
    _inherits(IframeUpload, _Component);

    function IframeUpload() {
        _classCallCheck(this, IframeUpload);

        return _possibleConstructorReturn(this, (IframeUpload.__proto__ || Object.getPrototypeOf(IframeUpload)).apply(this, arguments));
    }

    _createClass(IframeUpload, [{
        key: 'render',
        value: function render() {
            var _props = this.props;
            var _props$accept = _props.accept;
            var accept = _props$accept === undefined ? '*/*' : _props$accept;
            var _props$name = _props.name;
            var name = _props$name === undefined ? 'attachment_1' : _props$name;
            var _props$upload_style = _props.upload_style;
            var upload_style = _props$upload_style === undefined ? {} : _props$upload_style;

            return _react2.default.createElement(
                'div',
                { ref: 'upload', className: _upload2.default['upload-input__wrap'], style: upload_style },
                _react2.default.createElement('input', { type: 'file',
                    className: _upload2.default['upload-input'],
                    name: name,
                    onChange: this.changeHandle.bind(this),
                    accept: accept }),
                this.props.children ? this.props.children : _react2.default.createElement(
                    'span',
                    { className: _upload2.default['upload-text'] },
                    '\u4E0A\u4F20\u6587\u4EF6'
                )
            );
        }
    }, {
        key: 'changeHandle',
        value: function changeHandle() {
            var url = this.props.url;

            var ele = this.refs.upload;
            var upload_handle = new _iframe2.default({
                url: url,
                button: ele
            });
        }
    }]);

    return IframeUpload;
}(_react.Component);

exports.default = IframeUpload;