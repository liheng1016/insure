"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Row = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 该组件把布局均分为12份，每份所占百分比位100/12
 */
var GridLayout = function (_Component) {
	_inherits(GridLayout, _Component);

	function GridLayout() {
		_classCallCheck(this, GridLayout);

		return _possibleConstructorReturn(this, (GridLayout.__proto__ || Object.getPrototypeOf(GridLayout)).apply(this, arguments));
	}

	_createClass(GridLayout, [{
		key: "render",
		value: function render() {
			var percent = 100 / 12;
			var _props = this.props;
			var _props$width = _props.width;
			var width = _props$width === undefined ? 12 : _props$width;
			var _props$offset = _props.offset;
			var offset = _props$offset === undefined ? 0 : _props$offset;
			var _props$align = _props.align;
			var align = _props$align === undefined ? "left" : _props$align;
			var _props$type = _props.type;
			var type = _props$type === undefined ? "" : _props$type;


			var style = {
				width: Number(width) * percent + '%',
				display: 'inline-block',
				// overflow:'hidden',
				float: 'left',
				textAlign: align,
				marginLeft: Number(offset) * percent + '%'
			};

			// 如果是存文本内容就会自动的省略文字
			var textCss = {
				overflow: "hidden",
				whiteSpace: "nowrap",
				textOverflow: "ellipsis"
			};

			if (type === 'text') {
				style = Object.assign({}, style, textCss);
			}

			return _react2.default.createElement(
				"div",
				{ style: style },
				this.props.children
			);
		}
	}]);

	return GridLayout;
}(_react.Component);
/**
 * 配合GridLayout组件使用，清除浮动
 */


exports.default = GridLayout;

var Row = exports.Row = function (_Component2) {
	_inherits(Row, _Component2);

	function Row() {
		_classCallCheck(this, Row);

		return _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).apply(this, arguments));
	}

	_createClass(Row, [{
		key: "render",
		value: function render() {
			var style = {
				"clear": "both",
				"overflow": "hidden"
			};

			return _react2.default.createElement(
				"div",
				{ style: style },
				this.props.children
			);
		}
	}]);

	return Row;
}(_react.Component);