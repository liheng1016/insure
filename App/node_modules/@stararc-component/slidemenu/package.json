{
  "_args": [
    [
      {
        "raw": "@stararc-component/slidemenu",
        "scope": "@stararc-component",
        "escapedName": "@stararc-component%2fslidemenu",
        "name": "@stararc-component/slidemenu",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\phpEvent\\www\\react-redux\\pro.insur\\App"
    ]
  ],
  "_from": "@stararc-component/slidemenu@latest",
  "_id": "@stararc-component/slidemenu@1.0.1",
  "_inCache": true,
  "_location": "/@stararc-component/slidemenu",
  "_nodeVersion": "4.4.3",
  "_npmUser": {},
  "_npmVersion": "4.4.4",
  "_phantomChildren": {
    "babel-code-frame": "6.22.0",
    "big.js": "3.1.3",
    "cssesc": "0.1.0",
    "cssnano": "3.10.0",
    "emojis-list": "2.1.0",
    "fastparse": "1.1.1",
    "json5": "0.5.1",
    "object-assign": "4.1.1",
    "postcss": "5.2.16",
    "postcss-modules-extract-imports": "1.0.1",
    "postcss-modules-local-by-default": "1.1.1",
    "postcss-modules-scope": "1.0.2",
    "postcss-modules-values": "1.2.2",
    "regenerate": "1.3.2",
    "regjsgen": "0.2.0",
    "regjsparser": "0.1.5",
    "source-list-map": "0.1.8"
  },
  "_requested": {
    "raw": "@stararc-component/slidemenu",
    "scope": "@stararc-component",
    "escapedName": "@stararc-component%2fslidemenu",
    "name": "@stararc-component/slidemenu",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://192.168.1.200:4873/@stararc-component%2fslidemenu/-/slidemenu-1.0.1.tgz",
  "_shasum": "ef4b0a32c2c8d0678c06b4ac27814559f6c2b884",
  "_shrinkwrap": null,
  "_spec": "@stararc-component/slidemenu",
  "_where": "E:\\phpEvent\\www\\react-redux\\pro.insur\\App",
  "author": {
    "name": "liheng"
  },
  "dependencies": {
    "babel-core": "^6.9.0",
    "babel-loader": "^6.4.1",
    "babel-plugin-transform-runtime": "^6.9.0",
    "css-loader": "^0.28.0",
    "react": "^15.4.2",
    "webpack": "^1.13.0"
  },
  "description": "slidemenu",
  "devDependencies": {},
  "dist": {
    "shasum": "ef4b0a32c2c8d0678c06b4ac27814559f6c2b884",
    "tarball": "http://192.168.1.200:4873/@stararc-component%2fslidemenu/-/slidemenu-1.0.1.tgz"
  },
  "keywords": [
    "slidemenu"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "@stararc-component/slidemenu",
  "optionalDependencies": {},
  "readme": "## SlideMenu\r\n>des 二级侧边栏的组件\r\n\r\n```\r\nimport React,{Component} from 'react';\r\nimport {Link} from 'react-router';\r\nimport style from './index.css';\r\nimport SlideBar from './SlideBar';\r\n\r\nexport default class Menu extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tmenu:props.menu||[],\r\n\t\t\tactiveIndex:'',//二级菜单的key值\r\n\t\t\tsubIndex:''//三级菜单的key值\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={style[\"slide__menu\"]}>\r\n\t\t\t\t<SlideBar>\r\n\t\t\t\t\t<ul className={style[\"slide__ul\"]}>\r\n\t\t\t\t\t\t{this.getContent()}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</SlideBar>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t// 刷新页面的时候显示选中\r\n\tcheckIsSelectMenu(menu,path,index,parentIndex=\"0\"){\r\n\t\tmenu.map((m,i)=>{\r\n\t\t\tif(menu[i].path === path){\r\n\t\t\t\tif(parentIndex){\r\n\t\t\t\t\tindex.activeIndex = parentIndex;\r\n\t\t\t\t\tindex.subIndex = i;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tindex.activeIndex = i;\r\n\t\t\t\t}\r\n\t\t\t\treturn index;\r\n\t\t\t}else{\r\n\t\t\t\tif(menu[i].subs&&menu[i].subs.length){\r\n\t\t\t\t\tthis.checkIsSelectMenu(menu[i].subs,path,index,i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t})\r\n\t}\r\n\t// 获取菜单\r\n\tgetContent(){\r\n\t\tlet {menu} = this.state,self = this;\r\n\r\n\t\treturn menu.map((m,key)=>{\r\n\t\t\t// 过滤菜单项\r\n\t\t\tif(m.not_show){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\treturn(\r\n\t\t\t\tself.getMenu(m,key)\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\t// 获取二级菜单\r\n\tgetMenu(item,key){\r\n\t\tlet isActive =this.state.activeIndex == key;\r\n\r\n\t\tif(item.subs&&item.subs.length){\r\n\t\t\treturn (\r\n\t\t\t\t<li key={key} onMouseOver={e=>this.mouseOverHandle(key)}>\r\n\t\t\t\t\t<div className={style[\"has__sub\"]} onClick={e=>this.clickHandle(key)}>\r\n\t\t\t\t\t\t<a href=\"javascript:;\"  className={isActive?style[\"active__menu\"]:style[\"link__hasSub\"]} >\r\n\t\t\t\t\t\t\t{/*<img src={isActive?item.icon_active:item.icon} alt=\"icon\" className={style[\"menu__icon\"]}/>*/}\r\n\t\t\t\t\t\t\t{item.label}\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<span className={item.isPack?style[\"un__pack\"]:style[\"pack__up\"]}></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titem.isPack ? <ul className={style[\"silde__ul--sub\"]}>{this.getSub(key,item)}</ul>:''\r\n\t\t\t\t\t}\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t}else{\r\n\t\t\treturn (\r\n\t\t\t\t<li key={key} onMouseOver={e=>this.mouseOverHandle(key)} >\r\n\t\t\t\t\t<div className={style[\"hasnot__sub\"]} onClick={e=>this.clickHandle(key)}>\r\n\t\t\t\t\t\t<Link to={item.path} activeClassName={style[\"active__menu\"]}>\r\n\t\t\t\t\t\t\t{/*<img src={isActive?item.icon_active:item.icon} alt=\"icon\" className={style[\"menu__icon\"]}/>*/}\r\n\t\t\t\t\t\t\t{item.label}\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\tmouseOverHandle(key){\r\n\t\t// this.setState({\r\n\t\t// \tcurrentIndex:key\r\n\t\t// })\r\n\t}\r\n\tsetSubActiveIndex(subIndex){\r\n\t\tthis.setState({\r\n\t\t\tsubIndex:subIndex\r\n\t\t}) \r\n\t}\r\n\t// 获取三级菜单\r\n\tgetSub(parentIndex,item){\r\n\t\treturn item.subs.map((sub,index)=>{\r\n\t\t\tlet isActive = (parentIndex === this.state.activeIndex)&&(index === this.state.subIndex);\r\n\t\t\t// 过滤掉不显示的菜单项\r\n\t\t\tif(sub.not_show){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\treturn (\r\n\t\t\t\t<li key={index} onClick={e=>this.setSubActiveIndex(index)} className={isActive?style['active']:''} >\r\n\t\t\t\t\t<Link to={sub.path}>{sub.label} </Link>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\t// 点击下拉按钮\r\n\tclickHandle(index,isSubIndex){\r\n\t\tlet menu = this.state.menu.slice(0);\r\n\r\n\t\tmenu.map((item,key)=>{\r\n\t\t\tif(index != key){\r\n\t\t\t\titem.isPack = false;\r\n\t\t\t} \r\n\t\t});\r\n\r\n\t\tmenu[index].isPack = !menu[index].isPack;\r\n\r\n\t\tthis.setState({\r\n\t\t\tmenu:menu,\r\n\t\t\tactiveIndex:index,\r\n\t\t\tsubIndex:!!typeof(isSubIndex)?isSubIndex:\"\"\r\n\t\t}); \r\n\t}\r\n\t// 页面刷新的时候选中菜单\r\n\tcomponentDidMount(nextProps) {\r\n    \tlet {menu,location} = this.props,Index={\r\n    \t\tactiveIndex:\"0\",\r\n    \t\tsubIndex:\"0\"\r\n    \t};\r\n\t\r\n\t\tlet menuIndex =  this.checkIsSelectMenu(menu,location.pathname,Index);\r\n\r\n      \tthis.setState({\r\n      \t\tactiveIndex:Index.activeIndex,\r\n    \t\tsubIndex:Index.subIndex\r\n       \t},function () {\r\n       \t\tIndex.activeIndex && this.clickHandle(Index.activeIndex,Index.subIndex);\r\n       \t})\r\n\t}\r\n}\t\r\n\r\n```\r\n##params\r\n\r\n`menu`  传递进来的菜单数组,结构如下\r\n```\r\n[{\r\n\tlabel:'菜单名称'\r\n\tpath:'跳转路径'\r\n\tsubs:[]\r\n}]\r\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "test"
  },
  "version": "1.0.1"
}
