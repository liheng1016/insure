'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _index = require('./index.css');

var _index2 = _interopRequireDefault(_index);

var _SlideBar = require('./SlideBar');

var _SlideBar2 = _interopRequireDefault(_SlideBar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Menu = function (_Component) {
	_inherits(Menu, _Component);

	function Menu(props) {
		_classCallCheck(this, Menu);

		var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));

		_this.state = {
			menu: props.menu || [],
			activeIndex: '', //二级菜单的key值
			subIndex: '' //三级菜单的key值
		};
		return _this;
	}

	_createClass(Menu, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				{ className: _index2.default["slide__menu"] },
				_react2.default.createElement(
					_SlideBar2.default,
					null,
					_react2.default.createElement(
						'ul',
						{ className: _index2.default["slide__ul"] },
						this.getContent()
					)
				)
			);
		}
		// 刷新页面的时候显示选中

	}, {
		key: 'checkIsSelectMenu',
		value: function checkIsSelectMenu(menu, path, index) {
			var _this2 = this;

			var parentIndex = arguments.length <= 3 || arguments[3] === undefined ? "0" : arguments[3];

			menu.map(function (m, i) {
				if (menu[i].path === path) {
					if (parentIndex) {
						index.activeIndex = parentIndex;
						index.subIndex = i;
					} else {
						index.activeIndex = i;
					}
					return index;
				} else {
					if (menu[i].subs && menu[i].subs.length) {
						_this2.checkIsSelectMenu(menu[i].subs, path, index, i);
					}
				}
			});
		}
		// 获取菜单

	}, {
		key: 'getContent',
		value: function getContent() {
			var menu = this.state.menu;var self = this;

			return menu.map(function (m, key) {
				// 过滤菜单项
				if (m.not_show) {
					return;
				}

				return self.getMenu(m, key);
			});
		}
		// 获取二级菜单

	}, {
		key: 'getMenu',
		value: function getMenu(item, key) {
			var _this3 = this;

			var isActive = this.state.activeIndex == key;

			if (item.subs && item.subs.length) {
				return _react2.default.createElement(
					'li',
					{ key: key, onMouseOver: function onMouseOver(e) {
							return _this3.mouseOverHandle(key);
						} },
					_react2.default.createElement(
						'div',
						{ className: _index2.default["has__sub"], onClick: function onClick(e) {
								return _this3.clickHandle(key);
							} },
						_react2.default.createElement(
							'a',
							{ href: 'javascript:;', className: isActive ? _index2.default["active__menu"] : _index2.default["link__hasSub"] },
							item.label
						),
						_react2.default.createElement('span', { className: item.isPack ? _index2.default["un__pack"] : _index2.default["pack__up"] })
					),
					item.isPack ? _react2.default.createElement(
						'ul',
						{ className: _index2.default["silde__ul--sub"] },
						this.getSub(key, item)
					) : ''
				);
			} else {
				return _react2.default.createElement(
					'li',
					{ key: key, onMouseOver: function onMouseOver(e) {
							return _this3.mouseOverHandle(key);
						} },
					_react2.default.createElement(
						'div',
						{ className: _index2.default["hasnot__sub"], onClick: function onClick(e) {
								return _this3.clickHandle(key);
							} },
						_react2.default.createElement(
							_reactRouter.Link,
							{ to: item.path, activeClassName: _index2.default["active__menu"] },
							item.label
						)
					)
				);
			}
		}
	}, {
		key: 'mouseOverHandle',
		value: function mouseOverHandle(key) {
			// this.setState({
			// 	currentIndex:key
			// })
		}
	}, {
		key: 'setSubActiveIndex',
		value: function setSubActiveIndex(subIndex) {
			this.setState({
				subIndex: subIndex
			});
		}
		// 获取三级菜单

	}, {
		key: 'getSub',
		value: function getSub(parentIndex, item) {
			var _this4 = this;

			return item.subs.map(function (sub, index) {
				var isActive = parentIndex === _this4.state.activeIndex && index === _this4.state.subIndex;
				// 过滤掉不显示的菜单项
				if (sub.not_show) {
					return;
				}
				return _react2.default.createElement(
					'li',
					{ key: index, onClick: function onClick(e) {
							return _this4.setSubActiveIndex(index);
						}, className: isActive ? _index2.default['active'] : '' },
					_react2.default.createElement(
						_reactRouter.Link,
						{ to: sub.path },
						sub.label,
						' '
					)
				);
			});
		}
		// 点击下拉按钮

	}, {
		key: 'clickHandle',
		value: function clickHandle(index, isSubIndex) {
			var menu = this.state.menu.slice(0);

			menu.map(function (item, key) {
				if (index != key) {
					item.isPack = false;
				}
			});

			menu[index].isPack = !menu[index].isPack;

			this.setState({
				menu: menu,
				activeIndex: index,
				subIndex: !!(typeof isSubIndex === 'undefined' ? 'undefined' : _typeof(isSubIndex)) ? isSubIndex : ""
			});
		}
		// 页面刷新的时候选中菜单

	}, {
		key: 'componentDidMount',
		value: function componentDidMount(nextProps) {
			var _props = this.props;
			var menu = _props.menu;
			var location = _props.location;var Index = {
				activeIndex: "0",
				subIndex: "0"
			};

			var menuIndex = this.checkIsSelectMenu(menu, location.pathname, Index);

			this.setState({
				activeIndex: Index.activeIndex,
				subIndex: Index.subIndex
			}, function () {
				Index.activeIndex && this.clickHandle(Index.activeIndex, Index.subIndex);
			});
		}
	}]);

	return Menu;
}(_react.Component);

exports.default = Menu;