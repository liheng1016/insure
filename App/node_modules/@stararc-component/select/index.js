'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _index = require('./index.css');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Select = function (_Component) {
    _inherits(Select, _Component);

    function Select(props) {
        _classCallCheck(this, Select);

        var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

        _this.state = { value: props.defaultValue || '' };
        return _this;
    }

    _createClass(Select, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props;
            var _props$className = _props.className;
            var className = _props$className === undefined ? "select" : _props$className;
            var _props$options = _props.options;
            var options = _props$options === undefined ? [] : _props$options;


            var opts = options.map(function (v, index) {
                return _react2.default.createElement(
                    'option',
                    { key: index, value: v.id },
                    v.name
                );
            });
            return _react2.default.createElement(
                'select',
                { value: this.state.value,
                    className: _index2.default[className],
                    onChange: function onChange(e) {
                        return _this2.changeHandle(e);
                    },
                    onFocus: function onFocus(e) {
                        return _this2.focusHandle(e);
                    },
                    onBlur: function onBlur(e) {
                        return _this2.blurHandle(e);
                    } },
                _react2.default.createElement(
                    'option',
                    { value: '' },
                    '\u5168\u90E8'
                ),
                this.props.children,
                opts
            );
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.defaultValue != null && this.props.defaultValue !== nextProps.defaultValue) {
                this.setState({ value: nextProps.defaultValue });
            }
        }
    }, {
        key: 'focusHandle',
        value: function focusHandle(e) {
            this.props.focusEvent && this.props.focusEvent();
        }
    }, {
        key: 'blurHandle',
        value: function blurHandle(e) {
            this.props.blurEvent && this.props.blurEvent();
        }
    }, {
        key: 'changeHandle',
        value: function changeHandle(e) {
            var currentValue = e.target.value;
            var onChange = this.props.onChange;

            this.setState({ value: currentValue }, function () {
                onChange && onChange(currentValue);
            });
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            return this.state.value;
        }

        // 返回的是选中的option的key value值（对象）

    }, {
        key: 'getAllValue',
        value: function getAllValue() {
            var options = this.props.options || [],
                currentValue = this.state.value,
                aimValue = { id: '', name: '' };

            for (var i = 0; i < options.length; i++) {
                if (options[i].id == currentValue) {
                    aimValue = options[i];
                }
            }

            return aimValue;
        }
    }]);

    return Select;
}(_react.Component);

exports.default = Select;