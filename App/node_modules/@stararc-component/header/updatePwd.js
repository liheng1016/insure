'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.updatePassword = updatePassword;
exports.closePassword = closePassword;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _updatePwd = require('./updatePwd.css');

var _updatePwd2 = _interopRequireDefault(_updatePwd);

var _input = require('@stararc-component/input');

var _input2 = _interopRequireDefault(_input);

var _button = require('@stararc-component/button');

var _button2 = _interopRequireDefault(_button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function updatePassword(defaultObj, callback) {
    var root = document.createElement('div');
    root.id = 'alertPassword';
    document.body.appendChild(root);
    return _reactDom2.default.render(_react2.default.createElement(UpdatePwd, { defaultObj: defaultObj, callback: callback }), root);
}

function closePassword() {
    var alertPassword = document.querySelector('#alertPassword');
    if (alertPassword) {
        _reactDom2.default.unmountComponentAtNode(alertPassword);
        alertPassword.parentNode.removeChild(alertPassword);
    }
}

var UpdatePwd = function (_Component) {
    _inherits(UpdatePwd, _Component);

    function UpdatePwd(props) {
        _classCallCheck(this, UpdatePwd);

        var _this = _possibleConstructorReturn(this, (UpdatePwd.__proto__ || Object.getPrototypeOf(UpdatePwd)).call(this, props));

        _this.state = {
            defaultObj: props.defaultObj,
            passwordEerror: '',
            newPasswordEerror: '',
            newConfirmPasswordEerror: ''
        };
        return _this;
    }

    _createClass(UpdatePwd, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                'div',
                { className: _updatePwd2.default["alert__wrap_password"] },
                _react2.default.createElement('div', { className: _updatePwd2.default["alert__bg_password"], onClick: function onClick(e) {
                        return _this2.closeAlertPassword(e);
                    } }),
                _react2.default.createElement(
                    'div',
                    { className: _updatePwd2.default["alert__password"] },
                    _react2.default.createElement(
                        'div',
                        { className: _updatePwd2.default["alert_user_update"] },
                        _react2.default.createElement(
                            'lable',
                            { className: _updatePwd2.default["alert_user_lable"] },
                            _react2.default.createElement(
                                'span',
                                { className: _updatePwd2.default["required_mark"] },
                                '*'
                            ),
                            '\u539F\u59CB\u5BC6\u7801\uFF1A'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _updatePwd2.default["alert_user_input"] },
                            _react2.default.createElement(_input2.default, { ref: 'password', type: "password", onChange: function onChange(e) {
                                    return _this2.changePassword(e);
                                } })
                        ),
                        _react2.default.createElement('span', { className: _updatePwd2.default[this.state.passwordEerror] })
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _updatePwd2.default["alert_user_update"] },
                        _react2.default.createElement(
                            'lable',
                            { className: _updatePwd2.default["alert_user_lable"] },
                            _react2.default.createElement(
                                'span',
                                { className: _updatePwd2.default["required_mark"] },
                                '*'
                            ),
                            '\u65B0\u5BC6\u7801\uFF1A'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _updatePwd2.default["alert_user_input"] },
                            _react2.default.createElement(_input2.default, { ref: 'newPassword', type: "password", onChange: function onChange(e) {
                                    return _this2.changeNewPassword(e);
                                } })
                        ),
                        _react2.default.createElement('span', { className: _updatePwd2.default[this.state.newPasswordEerror] })
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _updatePwd2.default["alert_user_update"] },
                        _react2.default.createElement(
                            'lable',
                            { className: _updatePwd2.default["alert_user_lable"] },
                            _react2.default.createElement(
                                'span',
                                { className: _updatePwd2.default["required_mark"] },
                                '*'
                            ),
                            '\u786E\u8BA4\u65B0\u5BC6\u7801\uFF1A'
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: _updatePwd2.default["alert_user_input"] },
                            _react2.default.createElement(_input2.default, { ref: 'newConfirmPassword', type: "password", onChange: function onChange(e) {
                                    return _this2.changeNewConfirmPassword(e);
                                } })
                        ),
                        _react2.default.createElement('span', { className: _updatePwd2.default[this.state.newConfirmPasswordEerror] })
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: _updatePwd2.default["alert_user_submit"] },
                        _react2.default.createElement(_button2.default, { text: "提交", onClick: function onClick(e) {
                                return _this2.submitForm(e);
                            } })
                    )
                )
            );
        }
    }, {
        key: 'closeAlertPassword',
        value: function closeAlertPassword() {
            closePassword && closePassword();
        }
    }, {
        key: 'getOption',
        value: function getOption() {
            return {
                // user_id:this.state.defaultObj.user_id,
                prepass: this.refs.password.getValue(),
                password: this.refs.newPassword.getValue()
            };
        }
    }, {
        key: 'changePassword',
        value: function changePassword() {
            var value = this.refs.password.getValue();
            this.setState({ passwordEerror: value && value.length >= 6 ? 'hook' : 'cross' });
            return value && value.length >= 6 ? true : false;
        }
    }, {
        key: 'changeNewPassword',
        value: function changeNewPassword() {
            var valueConfirm = this.refs.newConfirmPassword.getValue();
            var value = this.refs.newPassword.getValue();
            this.setState({ newPasswordEerror: value && value.length >= 6 ? 'hook' : 'cross' });
            this.setState({ newConfirmPasswordEerror: value == valueConfirm && value && valueConfirm ? 'hook' : 'cross' });
            return value && value.length >= 6 ? true : false;
        }
    }, {
        key: 'changeNewConfirmPassword',
        value: function changeNewConfirmPassword() {
            var newValue = this.refs.newPassword.getValue();
            var value = this.refs.newConfirmPassword.getValue();
            this.setState({ newConfirmPasswordEerror: value && value == newValue && value.length >= 6 ? 'hook' : 'cross' });
            return value && value == newValue && value.length >= 6 ? true : false;
        }
    }, {
        key: 'submitForm',
        value: function submitForm(e) {
            var callback = this.props.callback;var data = this.getOption();var isSubmit = true;
            if (!this.changePassword()) {
                isSubmit = false;
            }
            if (!this.changeNewPassword()) {
                isSubmit = false;
            }
            if (!this.changeNewConfirmPassword()) {
                isSubmit = false;
            }
            if (!isSubmit) {
                return;
            }
            // callback(data);
        }
    }]);

    return UpdatePwd;
}(_react.Component);
