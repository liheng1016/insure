import React, {Component} from 'react';
import ReactDOM from 'react-dom';
import style from './updatePwd.css';
import Input from '@stararc-component/input';
import Button from '@stararc-component/button';

export function updatePassword(defaultObj,callback) {
    let root=document.createElement('div');
    root.id='alertPassword';
    document.body.appendChild(root);
    return ReactDOM.render(<UpdatePwd defaultObj={defaultObj} callback={callback}/>,root);
}

export function closePassword() {
    let alertPassword=document.querySelector('#alertPassword');
    if(alertPassword){
        ReactDOM.unmountComponentAtNode(alertPassword);
        alertPassword.parentNode.removeChild(alertPassword);
    }
}

class UpdatePwd extends Component{
    constructor(props){
        super(props);
        this.state={
            defaultObj:props.defaultObj,
            passwordEerror:'',
            newPasswordEerror:'',
            newConfirmPasswordEerror:'',
        }
    }
    render(){
        return(
            <div className={style["alert__wrap_password"]}>
                <div className={style["alert__bg_password"]} onClick={e => this.closeAlertPassword(e)}></div>
                <div className={style["alert__password"]}>
                    <div className={style["alert_user_update"]}>
                        <lable className={style["alert_user_lable"]}><span className={style["required_mark"]}>*</span>原始密码：</lable>
                        <div className={style["alert_user_input"]}>
                            <Input ref="password" type={"password"} onChange={e=>this.changePassword(e)}/>
                        </div>
                        <span className={style[this.state.passwordEerror]}></span>
                    </div>
                    <div className={style["alert_user_update"]}>
                        <lable className={style["alert_user_lable"]}><span className={style["required_mark"]}>*</span>新密码：</lable>
                        <div className={style["alert_user_input"]}>
                            <Input ref="newPassword" type={"password"} onChange={e=>this.changeNewPassword(e)}/>
                        </div>
                        <span className={style[this.state.newPasswordEerror]}></span>
                    </div>
                    <div className={style["alert_user_update"]}>
                        <lable className={style["alert_user_lable"]}><span className={style["required_mark"]}>*</span>确认新密码：</lable>
                        <div className={style["alert_user_input"]}>
                            <Input ref="newConfirmPassword" type={"password"} onChange={e=>this.changeNewConfirmPassword(e)}  />
                        </div>
                        <span className={style[this.state.newConfirmPasswordEerror]}></span>
                    </div>
                    <div className={style["alert_user_submit"]}>
                        <Button text={"提交"} onClick={e=> this.submitForm(e)}/>
                    </div>
                </div>
            </div>
        )
    }
    closeAlertPassword(){
        closePassword&&closePassword();
    }
    getOption(){
        return{
            // user_id:this.state.defaultObj.user_id,
            prepass:this.refs.password.getValue(),
            password:this.refs.newPassword.getValue()
        }
    }
    changePassword(){
        let value=this.refs.password.getValue();
        this.setState({passwordEerror:value&&value.length>=6?'hook':'cross'});
        return value&&value.length>=6?true:false;
    }
    changeNewPassword(){
        let valueConfirm=this.refs.newConfirmPassword.getValue();
        let value=this.refs.newPassword.getValue();
        this.setState({newPasswordEerror:value&&value.length>=6?'hook':'cross'});
        this.setState({newConfirmPasswordEerror:(value==valueConfirm)&&(value&&valueConfirm)?'hook':'cross'});
        return value&&value.length>=6?true:false;
    }
    changeNewConfirmPassword(){
        let newValue=this.refs.newPassword.getValue();
        let value=this.refs.newConfirmPassword.getValue();
        this.setState({newConfirmPasswordEerror:(value&&value==newValue)&&value.length>=6?'hook':'cross'});
        return (value&&value==newValue)&&value.length>=6?true:false;
    }
    submitForm(e){
        let {callback}=this.props,data=this.getOption(),isSubmit=true;
        if(!this.changePassword()){
            isSubmit=false;
        }
        if(!this.changeNewPassword()){
            isSubmit=false;
        }
        if(!this.changeNewConfirmPassword()){
            isSubmit=false;
        }
        if(!isSubmit){
            return;
        }
        // callback(data);
    }
}