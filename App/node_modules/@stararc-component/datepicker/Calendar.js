'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by able on 2016/9/28 0028.
 */
var Calendar = function () {
    function Calendar() {
        var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Calendar);

        this.monthNames = ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'];
        this.customConfig = opt;
        var dateObj = this.dateToObj(defaultValue);
        this.selectedDateObj = (0, _simpleAssign2.default)({}, dateObj);
        this.currentDateObj = dateObj;
    }

    _createClass(Calendar, [{
        key: 'isCurrentMonth',
        value: function isCurrentMonth() {
            var today = this.dateToObj();
            var currentDateObj = this.currentDateObj;
            return today.year === currentDateObj.year && today.month === currentDateObj.month;
        }

        /**
         * 切换到下个月
         */

    }, {
        key: 'nextMonth',
        value: function nextMonth() {
            var currentDateObj = this.currentDateObj;
            var year = currentDateObj.year;
            var month = currentDateObj.month;

            var nextMonth = month + 1;
            if (nextMonth > 12) {
                year += 1;
                month = 1;
            } else {
                month += 1;
            }
            this.currentDateObj.year = year;
            this.currentDateObj.month = month;
            var dateString = this.format(this.currentDateObj, 'Y-M');
            this.currentDateObj = this.dateToObj(dateString);
        }

        /**
         * 切换到上个月
         */

    }, {
        key: 'prevMonth',
        value: function prevMonth() {
            var currentDateObj = this.currentDateObj;
            var year = currentDateObj.year;
            var month = currentDateObj.month;

            var prevMonth = month - 1;
            if (prevMonth < 1) {
                year -= 1;
                month = 12;
            } else {
                month -= 1;
            }
            this.currentDateObj.year = year;
            this.currentDateObj.month = month;
            var dateString = this.format(this.currentDateObj, 'Y-M');
            this.currentDateObj = this.dateToObj(dateString, 'prev');
        }
    }, {
        key: 'selectDate',
        value: function selectDate(date) {
            if (date) {
                this.currentDateObj.date = date;
                var dateString = this.format(this.currentDateObj, 'Y-M-D');
                this.currentDateObj = this.dateToObj(dateString);
                this.selectedDateObj = (0, _simpleAssign2.default)({}, this.currentDateObj);
            }
        }
    }, {
        key: 'selectMonth',
        value: function selectMonth(month) {
            this.currentDateObj.month = month;
            var dateString = this.format(this.currentDateObj, 'Y-M-D');
            this.currentDateObj = this.dateToObj(dateString);
            this.selectedDateObj = (0, _simpleAssign2.default)({}, this.currentDateObj);
        }
    }, {
        key: 'selectYear',
        value: function selectYear(year) {
            this.currentDateObj.year = year;
            var dateString = this.format(this.currentDateObj, 'Y-M-D');
            this.currentDateObj = this.dateToObj(dateString);
            this.selectedDateObj = (0, _simpleAssign2.default)({}, this.currentDateObj);
        }
    }, {
        key: 'getDatePickerConfig',
        value: function getDatePickerConfig() {
            var weekLabels = this.getWeek(this.customConfig.weekLabel);
            var currentDateObj = this.currentDateObj;
            var selectedDateObj = this.selectedDateObj;
            var year = currentDateObj.year;
            var month = currentDateObj.month;

            var monthLabels = this.getMonths(year, month);
            var selectedWeekDay = weekLabels[selectedDateObj.day];
            var currentMonth = this.format(currentDateObj, 'Y年M月');
            var selectedDate = this.format(selectedDateObj, 'M月D');
            var selectedYear = selectedDateObj.year;
            var selectedMonth = selectedDateObj.month;
            var selectedMonthName = this.getMonthName(selectedDateObj.month);
            var monthNames = this.getMonthLabel(this.customConfig.monthSuffix);
            var isCurrentMonth = this.isCurrentMonth();
            var today = new Date().getDate();
            var yearArea = this.yearArea();
            return _extends({
                weekLabels: weekLabels,
                currentDateObj: currentDateObj,
                monthLabels: monthLabels,
                currentMonth: currentMonth,
                selectedYear: selectedYear,
                selectedMonth: selectedMonth,
                isCurrentMonth: isCurrentMonth,
                today: today,
                selectedDate: selectedDate,
                selectedWeekDay: selectedWeekDay,
                selectedDateObj: selectedDateObj,
                monthNames: monthNames,
                selectedMonthName: selectedMonthName
            }, yearArea);
        }
    }, {
        key: 'getMonthMaxDay',
        value: function getMonthMaxDay(year, month) {
            var feb = this.getFebMaxDay(year);
            var months = [0, 31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            return months[Number(month)];
        }
    }, {
        key: 'getFebMaxDay',
        value: function getFebMaxDay(year) {
            var y = Number(year);
            return y % 4 === 0 && y % 100 !== 0 || y % 400 === 0 ? 29 : 28;
        }
    }, {
        key: 'dateToObj',
        value: function dateToObj(dateString, flag) {
            var d = dateString ? new Date(dateString) : new Date();
            var year = d.getFullYear();
            var month = d.getMonth() + 1;
            var day = d.getDay();
            var date = d.getDate();
            return { year: year, month: month, date: date, day: day };
        }

        /**
         * 格式化日期
         * @param dateObj
         * @param formatRule,Y-M-D,Y年M月D日,Y.M.D
         */

    }, {
        key: 'format',
        value: function format(dateObj, formatRule) {
            var self = this;
            return formatRule.replace(/(Y){0,1}(-|\.|年){0,1}(M){0,1}(-|\.|月){0,1}(D){0,1}(-|\.|日){0,1}/, function (match, $year, $year_symbol, $month, $month_symbol, $date, $date_symbol) {
                var result = '';
                if ($year) {
                    result += self.prefixZero(dateObj.year) + ($year_symbol || '');
                }
                if ($month) {
                    result += self.prefixZero(dateObj.month) + ($month_symbol || '');
                }
                if ($date) {
                    result += self.prefixZero(dateObj.date) + ($date_symbol || '');
                }
                return result;
            });
        }

        /**
         * 获取周
         * @returns {string[]}
         */

    }, {
        key: 'getWeek',
        value: function getWeek() {
            var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '周';

            var week = ['日', '一', '二', '三', '四', '五', '六'];
            var result = week.map(function (w) {
                return prefix + w;
            });
            return result;
        }
    }, {
        key: 'getMonthLabel',
        value: function getMonthLabel() {
            var suffix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '月';

            var labels = this.monthNames.map(function (item, index) {
                return { month: index + 1, name: item + suffix };
            });
            return labels;
        }
    }, {
        key: 'getMonthName',
        value: function getMonthName(month) {
            var suffix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '月';

            var result = '';
            for (var i = 0, len = this.monthNames.length; i < len; i++) {
                if (i + 1 === month) {
                    result = this.monthNames[i] + suffix;
                    break;
                }
            }
            return result;
        }

        /**
         * 获取月份的第一天
         * @param year
         * @param month
         * @returns {number}
         */

    }, {
        key: 'getDayAtMonthFirst',
        value: function getDayAtMonthFirst(year, month) {
            var dateString = this.format({ year: year, month: month }, 'Y-M') + '-01';
            return new Date(dateString).getDay();
        }
    }, {
        key: 'getMonths',
        value: function getMonths(year, month) {
            var max = this.getMonthMaxDay(year, month);
            var firstDay = this.getDayAtMonthFirst(year, month);
            var result = [];
            for (var j = 0; j < firstDay; j++) {
                result.push('');
            }
            for (var i = 1; i <= max; i++) {
                result.push(i);
            }
            return result;
        }
    }, {
        key: 'yearArea',
        value: function yearArea() {
            var currentYear = new Date().getFullYear();
            return {
                minYear: this.customConfig.minYear || currentYear - 50,
                maxYear: this.customConfig.maxYear || currentYear + 50
            };
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            var rule = this.getFormat();
            var selectedDateObj = this.selectedDateObj;
            return this.format(selectedDateObj, rule);
        }
    }, {
        key: 'getFormat',
        value: function getFormat() {
            var _customConfig = this.customConfig;
            var type = _customConfig.type;
            var format = _customConfig.format;

            if (!format) {
                switch (type) {
                    case 'year':
                        format = 'Y';
                        break;
                    case 'month':
                        format = 'Y-M';
                        break;
                    case 'date':
                    default:
                        format = 'Y-M-D';
                        break;
                }
            }
            return format;
        }
    }, {
        key: 'prefixZero',
        value: function prefixZero(num) {
            var n = parseInt(num);
            if (n < 10) {
                n = '0' + n;
            }
            return n;
        }
    }]);

    return Calendar;
}();

exports.default = Calendar;