'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _DatePicker = require('./DatePicker.css');

var _DatePicker2 = _interopRequireDefault(_DatePicker);

var _Calendar = require('./Calendar');

var _Calendar2 = _interopRequireDefault(_Calendar);

var _Year = require('./sub/Year');

var _Year2 = _interopRequireDefault(_Year);

var _Side = require('./sub/Side');

var _Side2 = _interopRequireDefault(_Side);

var _Date = require('./sub/Date');

var _Date2 = _interopRequireDefault(_Date);

var _Month = require('./sub/Month');

var _Month2 = _interopRequireDefault(_Month);

var _Footer = require('./sub/Footer');

var _Footer2 = _interopRequireDefault(_Footer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DatePicker = function (_Component) {
    _inherits(DatePicker, _Component);

    function DatePicker(props) {
        _classCallCheck(this, DatePicker);

        var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

        var defaultValue = props.defaultValue;
        var customConfig = props.customConfig;
        var _customConfig$type = customConfig.type;
        var type = _customConfig$type === undefined ? 'date' : _customConfig$type;

        _this.datePicker = new _Calendar2.default(defaultValue, customConfig);
        var conf = _this.datePicker.getDatePickerConfig();
        _this.state = { conf: conf, active: type, style: props.style || {} };
        return _this;
    }

    _createClass(DatePicker, [{
        key: 'adaptPos',
        value: function adaptPos() {
            var ele = this.refs.calendar;
            var eleSize = {
                left: getParentOffsetLeft(ele),
                // ele.parentNode.offsetLeft,
                top: ele.parentNode.offsetTop,
                height: ele.clientHeight,
                width: ele.clientWidth
            };
            var winSize = {
                width: window.innerWidth,
                height: window.innerHeight
            };
            var style = (0, _simpleAssign2.default)({}, this.state.style);
            if (eleSize.left + eleSize.width > winSize.width) {
                style.left = winSize.width - eleSize.width - eleSize.left + 'px';
            }
            if (eleSize.top + eleSize.height > winSize.height) {
                style.top = -eleSize.height + 'px';
            }
            this.setState({ style: style });
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.adaptPos();
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { ref: "calendar", className: _DatePicker2.default["calendar"], style: this.state.style || {} },
                _react2.default.createElement(_Side2.default, _extends({}, this.props, {
                    active: this.state.active,
                    conf: this.state.conf,
                    onChangeActive: this.onChangeActive.bind(this) })),
                _react2.default.createElement(
                    'section',
                    { className: _DatePicker2.default["datepicker"] },
                    this.showType(),
                    _react2.default.createElement(_Footer2.default, { onCancel: this.onCancel.bind(this), onConfirm: this.onConfirm.bind(this) })
                )
            );
        }
    }, {
        key: 'showType',
        value: function showType() {
            var _props$customConfig$t = this.props.customConfig.type;
            var type = _props$customConfig$t === undefined ? 'date' : _props$customConfig$t;
            var active = this.state.active;

            var dateEle = _react2.default.createElement(_Date2.default, _extends({}, this.props, {
                conf: this.state.conf,
                onTurnPrev: this.onTurnPrev.bind(this),
                onTurnNext: this.onTurnNext.bind(this),
                onSelect: this.onSelectDate.bind(this) }));
            var monthEle = _react2.default.createElement(_Month2.default, _extends({}, this.props, {
                conf: this.state.conf,
                onSelectMonth: this.onSelectMonth.bind(this) }));
            var yearEle = _react2.default.createElement(_Year2.default, _extends({}, this.props, {
                conf: this.state.conf,
                onSelectYear: this.onSelectYear.bind(this) }));
            switch (type) {
                case 'year':
                    return yearEle;
                case 'month':
                    return active === 'month' ? monthEle : yearEle;
                case 'date':
                default:
                    return active === 'date' ? dateEle : yearEle;
            }
        }
    }, {
        key: 'onTurnNext',
        value: function onTurnNext() {
            this.datePicker.nextMonth();
            this.setState({ conf: this.datePicker.getDatePickerConfig() });
        }
    }, {
        key: 'onTurnPrev',
        value: function onTurnPrev() {
            this.datePicker.prevMonth();
            this.setState({ conf: this.datePicker.getDatePickerConfig() });
        }
    }, {
        key: 'onSelectDate',
        value: function onSelectDate(date) {
            console.log(date);
            this.datePicker.selectDate(date);
            var self = this;
            this.setState({ conf: this.datePicker.getDatePickerConfig() }, function () {
                console.log(self.state.conf);
            });
        }
    }, {
        key: 'onSelectYear',
        value: function onSelectYear(year) {
            this.datePicker.selectYear(year);
            this.setState({ conf: this.datePicker.getDatePickerConfig() });
        }
    }, {
        key: 'onSelectMonth',
        value: function onSelectMonth(month) {
            this.datePicker.selectMonth(month);
            this.setState({ conf: this.datePicker.getDatePickerConfig() });
        }
    }, {
        key: 'onChangeActive',
        value: function onChangeActive(nextActive) {
            this.setState({ active: nextActive });
        }
    }, {
        key: 'onConfirm',
        value: function onConfirm() {
            var onConfirm = this.props.onConfirm;

            var date = this.datePicker.getValue();
            if (onConfirm) {
                onConfirm(date);
            }
        }
    }, {
        key: 'onCancel',
        value: function onCancel() {
            var onCancel = this.props.onCancel;

            if (onCancel) {
                onCancel();
            }
        }
    }]);

    return DatePicker;
}(_react.Component);

exports.default = DatePicker;


function getParentOffsetLeft(ele) {
    var offsetLeft = ele.offsetLeft;
    var tmpEle = ele.offsetParent;
    do {
        offsetLeft += tmpEle.offsetLeft;
        tmpEle = tmpEle.offsetParent;
    } while (tmpEle.nodeName !== 'BODY');
    return offsetLeft;
}