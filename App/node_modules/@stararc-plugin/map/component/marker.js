'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.set_marker = set_marker;
exports.clear_marker = clear_marker;
exports.clear_all_marker = clear_all_marker;
/**
 * Created by able on 17-5-23.
 */
function set_marker() {
    var markers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var marker_events = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var map_obj = arguments[2];

    for (var i = 0, len = markers.length; i < len; i++) {
        var marker = new AMap.Marker(merge_marker_config(markers[i], map_obj));
        bindEvent(marker, marker_events);
    }
}

function clear_marker() {}

function clear_all_marker() {}
/**
 * 默认的maker配置项
 * @returns {{animation: string, clickable: boolean, cursor: string}}
 */
function default_marker_config() {
    return {
        animation: 'AMAP_ANIMATION_DROP',
        clickable: true,
        cursor: 'pointer'
    };
}

/**
 * 合并marker参数
 * @param custom_config
 * @param map_obj
 * @returns {{}}
 */
function merge_marker_config() {
    var custom_config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var map_obj = arguments[1];

    var default_config = default_marker_config();
    var new_config = {};
    var _custom_config$lng = custom_config.lng;
    var lng = _custom_config$lng === undefined ? 0 : _custom_config$lng;
    var _custom_config$lat = custom_config.lat;
    var lat = _custom_config$lat === undefined ? 0 : _custom_config$lat;

    new_config.position = new AMap.LngLat(lng, lat);
    new_config.map = map_obj;
    return _extends({}, custom_config, default_config, new_config);
}

/**
 * available_events = [
 *  'click','dblclick','rightclick','mousemove','mouseover','mouseout','mousedown','mouseup','dragstart','dragging',
 *  'dragend','moveend','movealong','touchstart','touchmove','touchend'
 * ];
 * @param marker
 * @param marker_events
 */
function bindEvent(marker) {
    var marker_events = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    marker_events.forEach(function (event) {

        marker.on(event.type, event.handle, marker);
    });
}