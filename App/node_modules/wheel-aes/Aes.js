'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cryptoJs = require('crypto-js');

var _cryptoJs2 = _interopRequireDefault(_cryptoJs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function replaceUrlCode(value) {
    var result = value.replace(/%3D/g, '=');
    result = result.replace(/%2B/g, '+');
    return result;
}
function replaceSpecialSymbol(value) {
    var result = value.replace(/\+/g, '%2B');
    return result;
}

var Aes = function () {
    function Aes() {
        var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'keymustbe16bites';
        var iv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ivmustbe16bites.';
        var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'CBC';

        _classCallCheck(this, Aes);

        this.key = _cryptoJs2.default.enc.Utf8.parse(key);
        this.iv = _cryptoJs2.default.enc.Utf8.parse(iv);
        this.mode = _cryptoJs2.default.mode[mode.toUpperCase()];
    }

    _createClass(Aes, [{
        key: 'encrypt',
        value: function encrypt(value) {
            var encrypted = _cryptoJs2.default.AES.encrypt(value, this.key, {
                iv: this.iv,
                mode: this.mode,
                padding: _cryptoJs2.default.pad.ZeroPadding
            });
            return replaceSpecialSymbol(encrypted.toString());
        }
    }, {
        key: 'decrypt',
        value: function decrypt(value) {
            value = replaceUrlCode(value);
            var decrypted = _cryptoJs2.default.AES.decrypt(value, this.key, {
                iv: this.iv,
                mode: this.mode,
                padding: _cryptoJs2.default.pad.ZeroPadding
            });
            return decrypted.toString(_cryptoJs2.default.enc.Utf8);
        }
    }]);

    return Aes;
}();

exports.default = Aes;