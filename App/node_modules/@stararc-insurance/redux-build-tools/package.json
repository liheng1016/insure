{
  "_args": [
    [
      {
        "raw": "@stararc-insurance/redux-build-tools",
        "scope": "@stararc-insurance",
        "escapedName": "@stararc-insurance%2fredux-build-tools",
        "name": "@stararc-insurance/redux-build-tools",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\phpEvent\\www\\react-redux\\pro.insur\\App"
    ]
  ],
  "_from": "@stararc-insurance/redux-build-tools@latest",
  "_id": "@stararc-insurance/redux-build-tools@1.0.2",
  "_inCache": true,
  "_location": "/@stararc-insurance/redux-build-tools",
  "_nodeVersion": "4.4.3",
  "_npmUser": {},
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@stararc-insurance/redux-build-tools",
    "scope": "@stararc-insurance",
    "escapedName": "@stararc-insurance%2fredux-build-tools",
    "name": "@stararc-insurance/redux-build-tools",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "http://192.168.1.200:4873/@stararc-insurance%2fredux-build-tools/-/redux-build-tools-1.0.2.tgz",
  "_shasum": "097f741c84a1df093fe5f548a55c136a038e53ff",
  "_shrinkwrap": null,
  "_spec": "@stararc-insurance/redux-build-tools",
  "_where": "E:\\phpEvent\\www\\react-redux\\pro.insur\\App",
  "author": {
    "name": "liheng"
  },
  "dependencies": {},
  "description": ">用于创建action所对应的actiontype",
  "devDependencies": {},
  "dist": {
    "shasum": "097f741c84a1df093fe5f548a55c136a038e53ff",
    "tarball": "http://192.168.1.200:4873/@stararc-insurance%2fredux-build-tools/-/redux-build-tools-1.0.2.tgz"
  },
  "keywords": [
    "redux"
  ],
  "license": "ISC",
  "main": "actionHandle.js",
  "name": "@stararc-insurance/redux-build-tools",
  "optionalDependencies": {},
  "readme": "### 保险产品 数据流，actiontype,action 构建工具\r\n\r\n>用于创建action所对应的actiontype\r\n\r\n>源码位置：@stararc-insurance/core/reduxBuildTools\r\n\r\n```\r\n/**\r\n * Created by able on 2016/12/9 0009.\r\n */\r\nexport function dispatchHandle(type, params = {}, others) {\r\n    let action = {\r\n        type: type,\r\n        ...params,\r\n    };\r\n    if (others) {\r\n        others.forEach(function (item) {\r\n            action = {...action, ...item}\r\n        })\r\n    }\r\n    return action;\r\n}\r\n\r\nexport function requestHandle(ACTION_TYPE, requestFunc, params, ...others) {\r\n    return dispatch => {\r\n        dispatch(dispatchHandle(ACTION_TYPE.FETCH_START, {condition: params}));\r\n        requestFunc(params).then(function (result) {\r\n            //fetch success\r\n            let data = (result && result.data) || \"\";\r\n            dispatch(dispatchHandle(ACTION_TYPE.RECEIVE_DATA, {data: data, condition: params}, others));\r\n        }, function () {\r\n            // fetch fail\r\n            dispatch(dispatchHandle(ACTION_TYPE.FETCH_FAIL));\r\n        });\r\n    };\r\n}\r\n\r\nexport function actionHandle(ACTION_TYPE, requestFunc, params, onSuccess, onFail) {\r\n    return (dispatch, getState) => {\r\n        dispatch(dispatchHandle(ACTION_TYPE.FETCH_START, {condition: params}));\r\n        requestFunc(params).then(function (result) {\r\n            let actionTypeHandle = '';\r\n            //fetch success\r\n            if (result && result.ret == '0') {\r\n                actionTypeHandle = ACTION_TYPE.ACTION_SUCCESS;\r\n                onSuccess && onSuccess(result, dispatch, getState);\r\n            } else {\r\n                actionTypeHandle = ACTION_TYPE.ACTION_FAIL;\r\n                onFail && onFail(result, dispatch, getState);\r\n            }\r\n\r\n            dispatch(dispatchHandle(actionTypeHandle, {data: result, condition: params}));\r\n        }, function () {\r\n            // fetch fail\r\n            dispatch(dispatchHandle(ACTION_TYPE.FETCH_FAIL));\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Created by able on 2016/12/9 0009.\r\n */\r\nexport  class ActionTypeHandle {\r\n    constructor(prefix) {\r\n        if (typeof prefix === 'undefined') {\r\n            new Error('需要一个唯一的变量名称');\r\n        }\r\n        this.prefix = prefix;\r\n    }\r\n\r\n    request() {\r\n        return {\r\n            FETCH_START: 'FETCH_START',\r\n            FETCH_FAIL: 'FETCH_FAIL',\r\n            RECEIVE_DATA: 'RECEIVE_DATA',\r\n        };\r\n    }\r\n\r\n    action() {\r\n        return {\r\n            FETCH_START: 'FETCH_START',\r\n            FETCH_FAIL: 'FETCH_FAIL',\r\n            ACTION_SUCCESS: 'ACTION_SUCCESS',\r\n            ACTION_FAIL: 'ACTION_FAIL',\r\n        }\r\n    }\r\n\r\n    createRequestActionType(name = '') {\r\n        return this.actionTypeHandle(name, this.request());\r\n    }\r\n\r\n    createActionActionType(name = '') {\r\n        return this.actionTypeHandle(name, this.action());\r\n    }\r\n\r\n    actionTypeHandle(name, actionType) {\r\n        for (let key in actionType) {\r\n            if (actionType.hasOwnProperty(key)) {\r\n                actionType[key] = this.prefix + '.' + name + '.' + actionType[key];\r\n            }\r\n        }\r\n        return actionType;\r\n    }\r\n}\r\n```\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "test"
  },
  "version": "1.0.2"
}
