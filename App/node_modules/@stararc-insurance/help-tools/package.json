{
  "_args": [
    [
      {
        "raw": "@stararc-insurance/help-tools",
        "scope": "@stararc-insurance",
        "escapedName": "@stararc-insurance%2fhelp-tools",
        "name": "@stararc-insurance/help-tools",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\phpEvent\\www\\react-redux\\pro.insur\\App"
    ]
  ],
  "_from": "@stararc-insurance/help-tools@latest",
  "_id": "@stararc-insurance/help-tools@1.0.0",
  "_inCache": true,
  "_location": "/@stararc-insurance/help-tools",
  "_nodeVersion": "4.4.3",
  "_npmUser": {},
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@stararc-insurance/help-tools",
    "scope": "@stararc-insurance",
    "escapedName": "@stararc-insurance%2fhelp-tools",
    "name": "@stararc-insurance/help-tools",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "http://192.168.1.200:4873/@stararc-insurance%2fhelp-tools/-/help-tools-1.0.0.tgz",
  "_shasum": "bc2edc565a66ce92d60ce2f9ce3d95ecd7471f69",
  "_shrinkwrap": null,
  "_spec": "@stararc-insurance/help-tools",
  "_where": "E:\\phpEvent\\www\\react-redux\\pro.insur\\App",
  "author": {
    "name": "liheng"
  },
  "dependencies": {},
  "description": ">转换字符串，时间格式化，深copy等",
  "devDependencies": {},
  "dist": {
    "shasum": "bc2edc565a66ce92d60ce2f9ce3d95ecd7471f69",
    "tarball": "http://192.168.1.200:4873/@stararc-insurance%2fhelp-tools/-/help-tools-1.0.0.tgz"
  },
  "license": "ISC",
  "main": "function.js",
  "name": "@stararc-insurance/help-tools",
  "optionalDependencies": {},
  "readme": "### 保险产品 常用的一些小方法\r\n\r\n>转换字符串，时间格式化，深copy等\r\n\r\n>源码位置：@stararc-insurance/core/helpTools\r\n\r\n```\r\nexport function timeToString(time, format) {\r\n    let localTimeString = new Date(time * 1000).toLocaleString()\r\n    let tmpArr = localTimeString.match(/\\d{1,4}/g);\r\n    tmpArr[3] = /上午/.test(localTimeString) ? tmpArr[3] : 12 + Number(tmpArr[3]);\r\n    return tmpArr[0] + '年' + tmpArr[1] + '月' + tmpArr[2] + '日 ' + tmpArr[3] + ':' + tmpArr[4];\r\n}\r\n\r\nexport function toBr(text) {\r\n    return text.replace(/\\n/g, '<br/>');\r\n}\r\n\r\n\r\nexport function getFormatData(timestamp, format,) {\r\n    if (!timestamp) {\r\n        return;\r\n    }\r\n    let f = format || '-';\r\n\r\n    timestamp = timestamp * 1000;\r\n\r\n    let time = new Date(timestamp);\r\n\r\n    let Y = getYear(time);\r\n    let M = getMonth(time) + 1 < 10 ? ('0' + (getMonth(time) + 1)) : getMonth(time) + 1;\r\n    let D = getDay(time) < 10 ? ('0' + getDay(time)) : getDay(time);\r\n    ;\r\n\r\n    let h = getHours(time) + ':';\r\n    let m = getMinutes(time) + ':';\r\n    let s = getSeconds(time);\r\n\r\n\r\n    return (Y + f + M + f + D)\r\n}\r\n\r\nexport function getHoursMinutes(timestamp, format) {\r\n    let f = format || ':';\r\n    timestamp = Number(timestamp) * 1000;\r\n    let time = new Date(timestamp);\r\n    let h = getHours(time) < 10 ? '0' + getHours(time) : getHours(time);\r\n    let m = getMinutes(time) < 10 ? '0' + getMinutes(time) : getMinutes(time);\r\n    let s = getSeconds(time) < 10 ? '0' + getSeconds(time) : getSeconds(time);\r\n    return h + f + m + f + s;\r\n}\r\n\r\nexport function getWeekend(timestamp) {\r\n    timestamp = timestamp * 1000;\r\n    let time = new Date(timestamp);\r\n\r\n    let weeks = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];\r\n\r\n    return weeks[getWeek(time)];\r\n\r\n}\r\n\r\nexport function getYear(time) {\r\n    return time.getFullYear();\r\n}\r\n\r\nexport function getMonth(time) {\r\n    return time.getMonth();\r\n}\r\n\r\nexport function getDay(time) {\r\n    return time.getDate();\r\n}\r\n\r\nexport function getHours(time) {\r\n    return time.getHours();\r\n}\r\n\r\nexport function getMinutes(time) {\r\n    return time.getMinutes();\r\n}\r\n\r\nexport function getSeconds(time) {\r\n    return time.getSeconds();\r\n}\r\n\r\nexport function getWeek(time) {\r\n    return time.getDay();\r\n}\r\n\r\nexport function checkPhone(phoneNumber) {\r\n    var regp = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;\r\n    return regp.test(phoneNumber.toString());\r\n}\r\n\r\nexport function checkPassword(password) {\r\n    var regp = /^[\\da-zA-z]{6,12}$/;\r\n    return regp.test(password.toString());\r\n}\r\n\r\n/**\r\n * 解决在开发环境和生产环境由于使用的路由模式不一致导致的链接问题\r\n * @param link\r\n * @returns {string}\r\n * @author Able\r\n */\r\nexport function safeLink(link) {\r\n    return process.env.NODE_ENV === 'production' ? link : '#' + link;\r\n}\r\n\r\n/**\r\n * 截取字符串\r\n * @date   2016-10-21T12:15:12+0800\r\n * @author liheng\r\n */\r\nexport function limitLen(str, len = 15) {\r\n    let length = len;\r\n    let sl = str && str.length || 0;\r\n\r\n    if (sl <= length) {\r\n        return str;\r\n    } else {\r\n        return str.substr(0, len) + '...';\r\n    }\r\n}\r\n\r\n/**\r\n * 将null值转为空字符串\r\n * @param str\r\n * @returns {*}\r\n * @author Able\r\n */\r\nexport function safeStr(str) {\r\n    if (typeof str === 'undefined' || str === null) {\r\n        str = '';\r\n    }\r\n    return str;\r\n}\r\n\r\nexport function isArray(arr) {\r\n    return Object.prototype.toString.call(arr) === '[object Array]';\r\n}\r\n\r\n/**\r\n * 过滤路由获取菜单参数\r\n * @date   2016-12-28T14:40:26+0800\r\n * @author liheng\r\n * @param  {Object}                 item [description]\r\n * @param  {Array}                  menu [description]\r\n */\r\nexport function filterRouteMenu(item={}){\r\n    let menu=[],subs=[];\r\n    let childMenu = {\r\n        name:item.name,\r\n        path:item.path,\r\n        icon:item.icon,\r\n        icon_active:item.icon_active\r\n    };\r\n    if(item.childRoutes && item.childRoutes.length){\r\n        item.childRoutes.map((sub)=>{\r\n            subs.push({\r\n                name:sub.name,\r\n                path:sub.path\r\n            })\r\n        })\r\n\r\n        childMenu.subs = subs;\r\n    }\r\n    return childMenu;\r\n}\r\n\r\n\r\n/**\r\n * 格式化时间返回月份起始值\r\n * @date   2017-01-13T11:30:40+0800\r\n * @author liheng\r\n * @param  {[type]}                 argument [description]\r\n */\r\nexport function getFirstAndLastDay(time,format=\"-\",isAdd) {\r\n    let timeArr = time.split(format);\r\n    \r\n    let month = isAdd ? Number(timeArr[1])+1 : timeArr[1];\r\n\r\n    let newTime = new Date(timeArr[0],timeArr[1],0);\r\n\r\n    return {\r\n        since_at:[timeArr[0],timeArr[1],1].join(format),\r\n        max_at:[timeArr[0],timeArr[1],newTime.getDate()].join(format)\r\n    }    \r\n}\r\n\r\n/**\r\n * 深拷贝 dedpCopy\r\n * @date   2017-01-19T10:05:57+0800\r\n * @author liheng\r\n * @param  {[type]}                 params [description]\r\n */\r\nexport function deepCopy (params){\r\n    let type = typeof(params);\r\n    let newParams=\"\";    \r\n\r\n    if(type == \"object\"){\r\n        newParams=JSON.stringify(params);\r\n        newParams = JSON.parse(newParams);\r\n    }else{\r\n        newParams = params;\r\n    }\r\n\r\n    return newParams;\r\n}\r\n\r\n/**\r\n * 获取给定时间戳的第一天，当天，最后一天格式化数据\r\n * @date   2017-01-24T10:19:54+0800\r\n * @author liheng\r\n * @param  {[type]}                 time [description]\r\n * @param  {[type]}                 type [description]\r\n */\r\nexport function getFormatDay(time,type,format=\"-\"){\r\n    switch(type){\r\n        case \"f\":\r\n            return  getYear(time)+format+(getMonth(time)+1)+format+'1';\r\n        case \"c\":\r\n            return  getFormatData(time/1000);    \r\n        case \"l\":\r\n            let days =new Date(getYear(time),(getMonth(time)+1),0);\r\n\r\n            return getYear(time)+format+(getMonth(time)+1)+format+days.getDate();\r\n    }\r\n }\r\n```\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "test"
  },
  "version": "1.0.0"
}
