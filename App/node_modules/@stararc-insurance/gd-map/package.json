{
  "_args": [
    [
      {
        "raw": "@stararc-insurance/gd-map",
        "scope": "@stararc-insurance",
        "escapedName": "@stararc-insurance%2fgd-map",
        "name": "@stararc-insurance/gd-map",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\phpEvent\\www\\react-redux\\pro.insur\\App"
    ]
  ],
  "_from": "@stararc-insurance/gd-map@latest",
  "_id": "@stararc-insurance/gd-map@1.0.3",
  "_inCache": true,
  "_location": "/@stararc-insurance/gd-map",
  "_nodeVersion": "4.4.3",
  "_npmUser": {},
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@stararc-insurance/gd-map",
    "scope": "@stararc-insurance",
    "escapedName": "@stararc-insurance%2fgd-map",
    "name": "@stararc-insurance/gd-map",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/@stararc-insurance/pro",
    "/@stararc-insurance/pro/@stararc-insurance_functional-module/base-setting",
    "/@stararc-insurance/pro/@stararc-insurance_functional-module/claim-management",
    "/@stararc-insurance/pro/@stararc-insurance_functional-module/home-statistic",
    "/@stararc-insurance/pro/@stararc-insurance_functional-module/insur-control",
    "/@stararc-insurance/pro/@stararc-insurance_functional-module/risk-warning",
    "/@stararc-insurance/test",
    "/@stararc-insurance_functional-module/base-setting",
    "/@stararc-insurance_functional-module/claim-management",
    "/@stararc-insurance_functional-module/home-statistic",
    "/@stararc-insurance_functional-module/insur-control",
    "/@stararc-insurance_functional-module/risk-warning"
  ],
  "_resolved": "http://192.168.1.200:4873/@stararc-insurance%2fgd-map/-/gd-map-1.0.3.tgz",
  "_shasum": "8d885ae6d76c1979182253c78c81350f58ad9b2d",
  "_shrinkwrap": null,
  "_spec": "@stararc-insurance/gd-map",
  "_where": "E:\\phpEvent\\www\\react-redux\\pro.insur\\App",
  "author": {
    "name": "liheng"
  },
  "dependencies": {},
  "description": ">地图组件，相关打点，弹窗事件,具体方法看如下code",
  "devDependencies": {},
  "dist": {
    "shasum": "8d885ae6d76c1979182253c78c81350f58ad9b2d",
    "tarball": "http://192.168.1.200:4873/@stararc-insurance%2fgd-map/-/gd-map-1.0.3.tgz"
  },
  "license": "ISC",
  "main": "GDMap.js",
  "name": "@stararc-insurance/gd-map",
  "optionalDependencies": {},
  "readme": "### 保险产品 地图组件\r\n\r\n>地图组件，相关打点，弹窗事件,具体方法看如下code\r\n\r\n>源码位置：@stararc-insurance/core/GDMap\r\n\r\n```\r\nimport React, {Component} from 'react';\r\nimport style from './GDMap.css';\r\nimport {load_script} from \"@stararc-insurance/help-tools\";\r\n\r\n// import {CLUSTER_IMG_PATH} from '../../config';\r\n\r\nexport default class GDMap extends Component {\r\n    render() {\r\n        return (\r\n            <div className={style[\"map__container\"]} ref=\"mapContainer\"></div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        let container = this.refs.mapContainer;\r\n        let map = \"\";\r\n        \r\n        load_script(\"http://webapi.amap.com/maps?v=1.3&key=57263d2a64c3e10d5fc13819ed372b00\",function(){\r\n            map = initMap(container);\r\n        })\r\n\r\n        let {mapEvent, polygons, polygonEvent} = this.props;\r\n\r\n        this.map = map;\r\n        bindMapEvent(map, mapEvent);\r\n\r\n        if (this.props.markers) {\r\n            this.markers = createMarkers(this.props.markers, this.props.markerEvent);\r\n            let map = this.map;\r\n            this.markers.map(function (m) {\r\n                m.setMap(map);\r\n            });\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.infowin != this.props.infowin) {\r\n            if (this.infowin) {\r\n                this.infowin.close();\r\n            }\r\n            if (nextProps.infowin) {\r\n                this.infowin = addInfowin(this.map, nextProps.infowin.content, nextProps.infowin.position, nextProps.infowinEvent);\r\n            }\r\n        }\r\n        if (nextProps.markers != this.props.markers) {\r\n            if (this.markers) {\r\n                this.markers.map(function (m) {\r\n                    m.setMap(null);\r\n                })\r\n            }\r\n            if (nextProps.markers) {\r\n                this.markers = createMarkers(nextProps.markers, nextProps.markerEvent);\r\n                let map = this.map;\r\n                this.markers.map(function (m) {\r\n                    m.setMap(map);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @desc 初始化地图\r\n * @param  {[type]} container [description]\r\n * @param  {Object} options   [description]\r\n * @return {[type]}           [description]\r\n */\r\nfunction initMap(container, options = {}) {\r\n    return new AMap.Map(container, {\r\n        features: ['bg', 'building', 'point'],\r\n        center: [113.280637, 23.125178]\r\n    });\r\n\r\n}\r\n\r\n\r\n/**\r\n * @desc 地图对象绑定事件\r\n * @param  {obj} map      [地图对象]\r\n * @param  {Array}  mapEvent [事件数组]\r\n */\r\nfunction bindMapEvent(map, mapEvent = []) {\r\n    mapEvent.forEach(function (event) {\r\n        map.on(event['type'], function (e) {\r\n            event['eventHandle'](map, e);\r\n        });\r\n    })\r\n}\r\n\r\n/**\r\n * @desc 创建大量的marker点 用于聚合\r\n * @param  {Array}  cluster [description]\r\n * @return {[type]}         [description]\r\n */\r\nfunction createMarkers(cluster = [], markerEvent = []) {\r\n    let markers = cluster.map(function (m) {\r\n        var marker = new AMap.Marker({\r\n            position: new AMap.LngLat(m.geo_long, m.geo_lat),\r\n            content: m.icon,\r\n            size: new AMap.Size(32, 50),  //图标大小\r\n            extData: m,\r\n            title: m.name,\r\n        });\r\n\r\n        markerEvent.forEach(function (event) {\r\n            marker.on(event['type'], function () {\r\n                event['eventHandle'](marker);\r\n            })\r\n        });\r\n        return marker;\r\n    })\r\n    return markers;\r\n}\r\n\r\n/**\r\n * @desc 在地图对象上添加一个maker\r\n * @param {obj} map      [地图对象]\r\n * @param {obj} position [位置对象{lng:'',lat:''}]\r\n */\r\nfunction addMarker(map, position, markerEvent) {\r\n\r\n}\r\n\r\n/**\r\n * @desc 添加一个窗口对象\r\n * @param {[type]}  map               [description]\r\n * @param {Boolean} isCustom          [description]\r\n * @param {[type]}  autoMove          [description]\r\n * @param {[type]}  closeWhenClickMap [description]\r\n * @param {[type]}  content           [description]\r\n * @param {[type]}  position          [description]\r\n */\r\nfunction addInfowin(map, content, position, infoEvents = []) {\r\n    if (!position) {\r\n        return false;\r\n    }\r\n    let infowin = new AMap.InfoWindow({\r\n        isCustom: false,\r\n        autoMove: true,\r\n        closeWhenClickMap: true,\r\n        content: content,\r\n        position: new AMap.LngLat(position.geo_long, position.geo_lat),\r\n        offset: new AMap.Pixel(0, -30),\r\n        showShadow: false,\r\n    });\r\n    infoEvents.forEach(function (event) {\r\n        infowin.on(event.type, function (e) {\r\n            event.eventHandle(e, infowin);\r\n        });\r\n    });\r\n    infowin.open(map);\r\n    return infowin;\r\n}\r\n\r\n/**\r\n * @desc 添加聚合到地图上\r\n * @param {obj} context [上下文对象,用于绑定聚合对象,避免多次初始化聚合对象]\r\n * @param {obj} map     [地图对象]\r\n * @param {Array} markers [marker点数组]\r\n */\r\nfunction addCluster(context, map, markers, clusterEvent = []) {\r\n    map.plugin(['AMap.MarkerClusterer'], function () {\r\n        if (context.cluster) {\r\n            context.cluster.clearMarkers();\r\n        } else {\r\n            context.cluster = new AMap.MarkerClusterer(map);\r\n            let styles = [{\r\n                // url: CLUSTER_IMG_PATH,\r\n                size: new AMap.Size(47, 47),\r\n                offset: new AMap.Pixel(-16, -30),\r\n                textColor: '#fff'\r\n            }];\r\n            context.cluster.setStyles(styles);\r\n            clusterEvent.forEach(function (event) {\r\n                context.cluster.on(event['type'], function (currentObj) {\r\n                    event['eventHandle'](this, currentObj);\r\n                });\r\n            });\r\n        }\r\n        context.cluster.addMarkers(markers);\r\n    })\r\n}\r\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "test"
  },
  "version": "1.0.3"
}
